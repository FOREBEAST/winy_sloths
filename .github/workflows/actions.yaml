# This is a basic workflow to help you get started with Actions

name: Winy Sloths Continuous Integration

# Controls when the action will run. 
on: 
  workflow_dispatch:
    branches: [ feature_binance ]
    inputs:
        test_type:
          description: 'Test type (TU, TV or ALL)'
          required: true
          default: 'TU'
        symbol:
          description: 'Symbol (BTC, ETH or BNB)'
          required: true
          default: 'BTC'
        platform:
          description: 'Exchange platform (BINANCE, BYBIT or ALL)'
          required: true
          default: 'BINANCE'
        contract:
          description: 'Contract (SPOT, FUTURES or ALL)'
          required: true
          default: 'SPOT'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  TU_BTC:
    # The type of runner that the job will run on
    runs-on: self-hosted
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Run unitary tests on BTC spot
        env:
            API_KEY_MASTER_SPOT_1: ${{ secrets.API_KEY_MASTER_SPOT_1 }}
            API_KEY_MASTER_SECRET_SPOT_1: ${{ secrets.API_KEY_MASTER_SECRET_SPOT_1 }}
            API_KEY_MASTER_FUTURES_1: ${{ secrets.API_KEY_MASTER_FUTURES_1 }}
            API_KEY_MASTER_SECRET_FUTURES_1: ${{ secrets.API_KEY_MASTER_SECRET_FUTURES_1 }}

        run: |
          ./tests/run_test.bash TU SPOT BTC USDT BINANCE
      
      #- uses: actions/upload-artifact@master
      #  with:
      #        name: tu_reports
      #        path: |
      #            ${{ github.workspace }}/docs/pages/tu_spot.xml
      #            ${{ github.workspace }}/docs/pages/tu_futures.xml
      #            ${{ github.workspace }}/build/tu/futures/tu_futures_binance_BTCUSDT.xml
      #            ${{ github.workspace }}/build/tu/spot/tu_spot_binance_BTCUSDT.xml

  TU_BINANCE_SPOT:
      name: Binance spot unitary tests 
      needs: TU_BTC
      env:
        API_KEY_MASTER_SPOT_1: ${{ secrets.API_KEY_MASTER_SPOT_1 }}
        API_KEY_MASTER_SECRET_SPOT_1: ${{ secrets.API_KEY_MASTER_SECRET_SPOT_1 }}
      if: ${{  (github.event.inputs.platform == 'BINANCE' || github.event.inputs.platform == 'ALL') && (github.event.inputs.contract == 'ALL' || github.event.inputs.contract == 'SPOT')}}
      runs-on: self-hosted
      steps:
        - run: |
            echo "Running TU Bybit with SYMBOL = ${{ github.event.inputs.symbol }}, CONTRACT = ${{ github.event.inputs.contract }}, PLATFORM = ${{ github.event.inputs.platform }}"
            ./tests/run_test.bash TU SPOT ${{ github.event.inputs.symbol }} USDT BINANCE
            exit 0
  
  TU_BINANCE_FUTURES:
      name: Binance futures unitary tests 
      needs: TU_BTC
      env:
        API_KEY_MASTER_FUTURES_1: ${{ secrets.API_KEY_MASTER_FUTURES_1 }}
        API_KEY_MASTER_SECRET_FUTURES_1: ${{ secrets.API_KEY_MASTER_SECRET_FUTURES_1 }}
      if: ${{  (github.event.inputs.platform == 'BINANCE' || github.event.inputs.platform == 'ALL') && (github.event.inputs.contract == 'ALL' || github.event.inputs.contract == 'FUTURES')}}
      runs-on: self-hosted
      steps:
        - run: |
            echo "Running TU Bybit with SYMBOL = ${{ github.event.inputs.symbol }}, CONTRACT = ${{ github.event.inputs.contract }}, PLATFORM = ${{ github.event.inputs.platform }}"
            ./tests/run_test.bash TU FUTURES ${{ github.event.inputs.symbol }} USDT BINANCE
            exit 0

  TU_BYBIT_SPOT: 
      name: Bybit spot unitary tests
      needs: TU_BTC
      env:
        API_KEY_MASTER_SPOT_2: ${{ secrets.API_KEY_MASTER_SPOT_2 }}
        API_KEY_MASTER_SECRET_SPOT_2: ${{ secrets.API_KEY_MASTER_SECRET_SPOT_2 }}
      if: ${{  (github.event.inputs.platform == 'BYBIT' || github.event.inputs.platform == 'ALL') && (github.event.inputs.contract == 'ALL' || github.event.inputs.contract == 'SPOT')}}
      runs-on: self-hosted
      steps:
        - run: |
            echo "Running TU Bybit with SYMBOL = ${{ github.event.inputs.symbol }}, CONTRACT = ${{ github.event.inputs.contract }}, PLATFORM = ${{ github.event.inputs.platform }}"
            ./tests/run_test.bash TU SPOT ${{ github.event.inputs.symbol }} USDT BYBIT
            exit 0
  
  TU_BYBIT_FUTURES: 
      name: Bybit futures unitary tests
      needs: TU_BTC
      env:
        API_KEY_MASTER_FUTURES_2: ${{ secrets.API_KEY_MASTER_FUTURES_2 }}
        API_KEY_MASTER_SECRET_FUTURES_2: ${{ secrets.API_KEY_MASTER_SECRET_FUTURES_2 }}
      if: ${{  (github.event.inputs.platform == 'BYBIT' || github.event.inputs.platform == 'ALL') && (github.event.inputs.contract == 'ALL' || github.event.inputs.contract == 'FUTURES')}}
      runs-on: self-hosted
      steps:
        - run: |
            echo "Running TU Bybit with SYMBOL = ${{ github.event.inputs.symbol }}, CONTRACT = ${{ github.event.inputs.contract }}, PLATFORM = ${{ github.event.inputs.platform }}"
            ./tests/run_test.bash TU FUTURES ${{ github.event.inputs.symbol }} USDT BYBIT
            exit 0
  
  TV_BINANCE:
      name: Binance validation tests
      needs: [ TU_BINANCE_SPOT, TU_BINANCE_FUTURES ]
      if: ${{ github.event.inputs.test_type == 'TV' && github.event.inputs.platform == 'BINANCE' }} 
      runs-on: self-hosted
      steps:
        - run: echo "This should correspond to validation tests"; exit 0;
  
  TV_BYBIT:
      name: Bybit validation tests
      needs: [ TU_BYBIT_SPOT, TU_BYBIT_FUTURES ]
      if: ${{ github.event.inputs.test_type == 'TV' && github.event.inputs.platform == 'BYBIT' }} 
      runs-on: self-hosted
      steps:
        - run: echo "This should correspond to validation tests"; exit 0;

  Documentation:
    name: Documentation generation
    needs: [TV_BYBIT, TV_BINANCE]
    if: success()
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@master
        with:
            name: tu_reports

      # Runs a set of commands using the runners shell
      - name: Generate sphinx documentation
        run: |
          cd docs ; sphinx-apidoc -o . .. ; make html; cd ..
      
      - name : Publish Test Report
        uses: mikepenz/action-junit-report@v2
        if: always() # always run even if the previous step fails
        with: 
          report_paths: |
            ${{ github.workspace }}/build/tu/futures/tu_futures_binance_BTCUSDT.xml
            ${{ github.workspace }}/build/tu/spot/tu_spot_binance_BTCUSDT.xml
      
      #UNCOMMENT TO HAVE DOC AS ARTEFACT
      #- name: Publish Artifact
      #  uses: actions/upload-artifact@v2
      #  with:
      #    path: ${{ github.workspace }}/docs/_build/html
      #    name: doc

  sonarcloud:
    needs: [TV_BYBIT, TV_BINANCE]
    if: success()
    name: SonarCloud
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
  #      uses: SonarSource/sonarcloud-github-action@master
        run: |
          echo "Sonar Scan to add later"
  #      env:
  #        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
  #        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

