"""
    def cep__set_stop_loss_long(self, client, symbol, engaged_balance, \
                                entryPrice, mode, risk=RISK):
        self.called_function_name="cep__set_stop_loss_long"
        ret = 0
        price=(1 - (risk/engaged_balance))*entryPrice
        if (mode == HEDGE):
            client.futures_create_order(symbol=symbol, side=SELL, \
                                        positionSide=LONG, closeposition=TRUE, \
                                        stopPrice=round(float(price),0), \
                                        type=STOP_MARKET, \
                                        timestamp=client.futures_time())
        elif (mode == ONE_WAY):
            client.futures_create_order(symbol=symbol, side=SELL, \
                                        closeposition=TRUE, \
                                        stopPrice=round(float(price),0), \
                                        type=STOP_MARKET, \
                                        timestamp=client.futures_time())
        else:
            ret = 1
        
        return ret

    def cep__set_stop_loss_short(self, client, symbol, engaged_balance, \
                                entryPrice, mode, risk=RISK):
        self.called_function_name="cep__set_stop_loss_short"
        ret = 0
        price=(1 + (RISK/engaged_balance))*entryPrice
        if (mode == HEDGE):
            client.futures_create_order(symbol=symbol, side=BUY, positionSide=SHORT, \
                                        closeposition=TRUE, stopPrice=round(float(price),0), \
                                        type=STOP_MARKET, \
                                        timestamp=client.futures_time())
        elif (mode == ONE_WAY):
            client.futures_create_order(symbol=symbol, side=BUY, closeposition=TRUE, \
                                        stopPrice=round(float(price),0), type=STOP_MARKET, \
                                        timestamp=client.futures_time())
        else:
            ret = 1
        
        return ret
    
    def cep__clear_stop_loss(self, client, symbol):
        self.called_function_name="cep__clear_stop_loss"
        return client.futures_cancel_all_open_orders(symbol=symbol, countdownTime=0, \
                                                     timestamp=client.futures_time())
    
    """